alloy:
  extraEnv:
    - name: GRAFANA_ENDPOINT
      value: "xx.grafana.net/otlp"

  extraPorts:
    - name: otlp-grpc
      targetPort: 4317
      port: 4317
      protocol: TCP
      appProtocol: "h2c"
    - name: otlp-http
      targetPort: 4318
      port: 4318
      protocol: TCP
  configMap:
    create: true
    content: |
      logging {
        level = "debug"
        format = "logfmt"
      }
      
      otelcol.receiver.otlp "default" {
          grpc {
            endpoint = "0.0.0.0:4317"
          }

          http {
            endpoint = "0.0.0.0:4318"
          }

        output {
          metrics = [otelcol.processor.batch.default.input]
          logs    = [otelcol.processor.filter.filter_attributes.input]
          traces  = [otelcol.processor.batch.default.input, otelcol.connector.host_info.default.input]
        }
      }

      otelcol.connector.host_info "default" {
        host_identifiers = ["host.name"]

        output {
          metrics = [otelcol.processor.batch.default.input]
        }
      }


      otelcol.processor.batch "default" {
        output {
          metrics = [otelcol.exporter.otlphttp.grafana_cloud.input]
          logs    = [otelcol.exporter.otlphttp.grafana_cloud.input]
          traces  = [otelcol.exporter.otlphttp.grafana_cloud.input]
        }
      }


      otelcol.processor.filter "filter_attributes" {
      //will drop log line that not contains label
        logs {
          log_record = [
            `not IsMatch(resource.attributes["team"], ".*.+")`,
            `not IsMatch(resource.attributes["prio"], ".*.+")`,
          ]
        }

        output {
          logs = [otelcol.processor.batch.default.input]
        }
      }

      otelcol.exporter.otlphttp "grafana_cloud" {
        client {
          endpoint = sys.env("GRAFANA_ENDPOINT")
          auth     = otelcol.auth.basic.grafana_cloud.handler
        }
      }

      otelcol.auth.basic "grafana_cloud" {
        username = convert.nonsensitive(remote.kubernetes.secret.credentials.data["username"])
        password = convert.nonsensitive(remote.kubernetes.secret.credentials.data["password"])
      }

      remote.kubernetes.secret "credentials" {
        namespace = coalesce(sys.env("NAMESPACE"), "o11y")
        name = coalesce(sys.env("GCLOUD_CREDENTIALS"), "gcloud-creds")
      }
volumes:
  - name: alloy-logs
    emptyDir: {}

service:
  type: ClusterIP

controller:
  type: deployment
  replicas: 1

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 10001

serviceMonitor:
  enabled: false
