alloy:
  extraEnv:
    - name: GRAFANA_ENDPOINT
      value: "https://otlp-gateway-prod-eu-west-2.grafana.net/otlp"

  extraPorts:
    - name: otlp-grpc
      targetPort: 4317
      port: 4317
      protocol: TCP
      appProtocol: "h2c"
    - name: otlp-http
      targetPort: 4318
      port: 4318
      protocol: TCP
  configMap:
    create: true
    content: |
      logging {
        level = "debug"
        format = "logfmt"
      }
      
      otelcol.receiver.otlp "default" {
          grpc {
            endpoint = "0.0.0.0:4317"
          }

          http {
            endpoint = "0.0.0.0:4318"
          }

        output {
          metrics = [otelcol.processor.batch.default.input]
          logs    = [otelcol.processor.filter.filter_attributes.input]
          traces  = [otelcol.processor.filter.filter_attributes.input,
                    otelcol.connector.host_info.default.input,
                    otelcol.connector.spanlogs.autologging.input,]
        }
      }

      otelcol.connector.host_info "default" {
        host_identifiers = ["host.name"]

        output {
          metrics = [otelcol.processor.batch.default.input]
        }
      }

      otelcol.processor.filter "filter_attributes" {
      //will drop log line that not contains label
        logs {
          log_record = [
            `not IsMatch(resource.attributes["team"], ".*.+")`,
            `not IsMatch(resource.attributes["prio"], ".*.+")`,
          ]
        }

        output {
          logs = [otelcol.processor.attributes.default.input]
          traces = [otelcol.processor.batch.default.input]
        }
      }

      otelcol.processor.attributes "default" {
        action {
          key = "loki.resource.labels"
          value = "team"
          action = "insert"
        }

        output {
          logs = [otelcol.exporter.loki.default.input]
        }
      }

      otelcol.exporter.loki "default" {
        forward_to = [loki.write.grafanacloud.receiver]
      }

      
      otelcol.connector.spanlogs "autologging" {
          spans = false
          roots = true
          processes = false
          span_attributes = [ "http.method", "http.target", "http.status_code" ]
    
          overrides {
              trace_id_key = "traceId"
          }
          output {
              logs = [otelcol.exporter.loki.autologging.input]
          }
      }

      otelcol.exporter.loki "autologging" {
          forward_to = [loki.process.autologging.receiver]
      }

      loki.process "autologging" {
          stage.json {
              expressions = { "body" = "" }
          }
          stage.output {
              source = "body"
          }

          forward_to = [loki.write.autologging.receiver]
      }

      loki.write "autologging" {
          external_labels = {
              job = "alloy",
              env= "local",
          }
        endpoint {
          url = convert.nonsensitive(remote.kubernetes.secret.credentials.data["LOKI_ENDPOINT"])

          basic_auth {
            username = convert.nonsensitive(remote.kubernetes.secret.credentials.data["LOKI_USERNAME"])
            password = convert.nonsensitive(remote.kubernetes.secret.credentials.data["LOKI_PASSWORD"])
          }
        }
      }


      loki.write "grafanacloud" {
        endpoint {
          url = convert.nonsensitive(remote.kubernetes.secret.credentials.data["LOKI_ENDPOINT"])

          basic_auth {
            username = convert.nonsensitive(remote.kubernetes.secret.credentials.data["LOKI_USERNAME"])
            password = convert.nonsensitive(remote.kubernetes.secret.credentials.data["LOKI_PASSWORD"])
          }
        }
      }

      
      otelcol.processor.batch "default" {
        output {
          metrics = [otelcol.exporter.otlphttp.grafana_cloud.input]
          logs    = [otelcol.exporter.otlphttp.grafana_cloud.input]
          traces  = [otelcol.exporter.otlphttp.grafana_cloud.input,
                    otelcol.exporter.otlp.grafanacloud.input]
        }
      }

      otelcol.exporter.otlp "grafanacloud" {
        client {
          endpoint = sys.env("GRAFANA_ENDPOINT")
          auth = otelcol.auth.basic.grafana_cloud.handler
        }
      }


      otelcol.exporter.otlphttp "grafana_cloud" {
        client {
          endpoint = sys.env("GRAFANA_ENDPOINT")
          auth     = otelcol.auth.basic.grafana_cloud.handler
        }
      }

      otelcol.auth.basic "grafana_cloud" {
        username = "1053345"
        password = convert.nonsensitive(remote.kubernetes.secret.credentials.data["password"])
      }

      remote.kubernetes.secret "credentials" {
        namespace = coalesce(sys.env("NAMESPACE"), "o11y")
        name = coalesce(sys.env("GCLOUD_CREDENTIALS"), "gcloud-creds")
      }
volumes:
  - name: alloy-logs
    emptyDir: {}

service:
  type: ClusterIP

controller:
  type: deployment
  replicas: 1

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 10001

serviceMonitor:
  enabled: false
